{"version":3,"sources":["actions/data.js","components/Home.js","components/Album.js","components/Photo.js","serviceWorker.js","index.js","components/App.js"],"names":["getAlbums","Promise","resolve","reject","axios","get","then","resp","data","catch","e","props","useState","albums","setAlbums","useEffect","className","map","album","to","id","src","coverPhoto","name","setAlbum","photos","setPhotos","match","params","photo","url","setPhoto","title","Boolean","window","location","hostname","ReactDOM","render","exact","path","component","Home","Album","Photo","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"2RAEO,SAASA,IACd,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,IACGC,IAAI,WACJC,MAAK,SAAAC,GACJL,EAAQK,EAAKC,SAEdC,OAAM,SAAAC,GACLP,EAAOO,SCNA,eAAAC,GAAU,IAAD,EACMC,mBAAS,IADf,mBACfC,EADe,KACPC,EADO,KAKtB,OAHAC,qBAAU,WACRf,IAAYM,MAAK,SAAAE,GAAI,OAAIM,EAAUN,QAClC,IAED,6BACE,yBAAKQ,UAAU,SACb,0CAEF,yBAAKA,UAAU,QACZH,EAAOI,KAAI,SAAAC,GAAK,OACf,kBAAC,IAAD,CAAMC,GAAE,iBAAYD,EAAME,KACxB,yBAAKC,IAAKH,EAAMI,aAChB,uBAAGN,UAAU,SAASE,EAAMK,aCdzB,WAAAZ,GAAU,IAAD,EACIC,mBAAS,IADb,mBACfM,EADe,KACRM,EADQ,OAEMZ,mBAAS,IAFf,mBAEfa,EAFe,KAEPC,EAFO,OAGMd,mBAAS,IAHf,mBAGfC,EAHe,KAGPC,EAHO,KAatB,OARAC,qBAAU,WFML,IAAkBK,KELZT,EAAMgB,MAAMC,OAAOR,GFMvB,IAAInB,SAAQ,SAACC,EAASC,GAC3BC,IACGC,IADH,kBACkBe,EADlB,mBAEGd,MAAK,SAAAC,GACJL,EAAQK,EAAKC,SAEdC,OAAM,SAAAC,GACLP,EAAOO,UEbqBJ,MAAK,SAAAE,GACnCgB,EAAShB,GACTkB,EAAUlB,EAAKiB,WAEjBzB,IAAYM,MAAK,SAAAE,GAAI,OAAIM,EAAUN,QAClC,CAACG,EAAMgB,MAAMC,SAGd,6BACE,yBAAKZ,UAAU,SACb,4BAAKE,EAAMK,OAEb,yBAAKP,UAAU,gBACb,yBAAKA,UAAU,UACZH,EAAOI,KAAI,SAAAC,GAAK,OACf,uBAAGF,UAAU,WACV,IACD,kBAAC,IAAD,CAAMG,GAAE,iBAAYD,EAAME,KAAOF,EAAMK,WAI7C,yBAAKP,UAAU,QACZS,EAAOR,KAAI,SAAAY,GAAK,OACf,kBAAC,IAAD,CAAMV,GAAE,iBAAYU,EAAMT,KACxB,yBAAKC,IAAKQ,EAAMC,MAChB,uBAAGd,UAAU,SAASa,EAAMN,cChC3B,WAAAZ,GAAU,IAAD,EACIC,mBAAS,IADb,mBACfiB,EADe,KACRE,EADQ,KAStB,OANAhB,qBAAU,WHsBL,IAAkBK,KGrBZT,EAAMgB,MAAMC,OAAOR,GHsBvB,IAAInB,SAAQ,SAACC,EAASC,GAC3BC,IACGC,IADH,kBACkBe,EADlB,mBAEGd,MAAK,SAAAC,GACJL,EAAQK,EAAKC,SAEdC,OAAM,SAAAC,GACLP,EAAOO,UG7BqBJ,MAAK,SAAAE,GACnCuB,EAASvB,QAEV,CAACG,EAAMgB,MAAMC,SAGd,yBAAKZ,UAAU,WACb,yBAAKA,UAAU,SACb,4BAAKa,EAAMG,OACX,yBAAKX,IAAKQ,EAAMC,SCJJG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAST,MACvB,2DCZNU,IAASC,OAAO,mBCED,SAAA3B,GACb,OACE,kBAAC,IAAD,KACE,yBAAKK,UAAU,WACb,kBAAC,IAAD,CAAOuB,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOF,KAAK,aAAaC,UAAWE,IACpC,kBAAC,IAAD,CAAOH,KAAK,aAAaC,UAAWG,QDR5B,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEd1C,OAAM,SAAA2C,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.28cbf380.chunk.js","sourcesContent":["import axios from \"axios\"\n\nexport function getAlbums() {\n  return new Promise((resolve, reject) => {\n    axios\n      .get(\"/albums\")\n      .then(resp => {\n        resolve(resp.data)\n      })\n      .catch(e => {\n        reject(e)\n      })\n  })\n}\n\nexport function getAlbum(id) {\n  return new Promise((resolve, reject) => {\n    axios\n      .get(`/albums/${id}?_embed=photos`)\n      .then(resp => {\n        resolve(resp.data)\n      })\n      .catch(e => {\n        reject(e)\n      })\n  })\n}\n\nexport function getPhoto(id) {\n  return new Promise((resolve, reject) => {\n    axios\n      .get(`/photos/${id}?_expand=album`)\n      .then(resp => {\n        resolve(resp.data)\n      })\n      .catch(e => {\n        reject(e)\n      })\n  })\n}\n","import React, { useEffect, useState } from \"react\"\nimport { Link } from \"react-router-dom\"\nimport { getAlbums } from \"../actions/data\"\n\nexport default props => {\n  const [albums, setAlbums] = useState([])\n  useEffect(() => {\n    getAlbums().then(data => setAlbums(data))\n  }, [])\n  return (\n    <div>\n      <div className=\"aname\">\n        <h1>My Albums</h1>\n      </div>\n      <div className=\"grid\">\n        {albums.map(album => (\n          <Link to={`/album/${album.id}`}>\n            <img src={album.coverPhoto} />\n            <p className=\"title\">{album.name}</p>\n          </Link>\n        ))}\n      </div>\n    </div>\n  )\n}\n","import React, { useEffect, useState } from \"react\"\nimport { Link } from \"react-router-dom\"\nimport { getAlbum, getAlbums } from \"../actions/data\"\n\nexport default props => {\n  const [album, setAlbum] = useState({})\n  const [photos, setPhotos] = useState([])\n  const [albums, setAlbums] = useState([])\n\n  useEffect(() => {\n    getAlbum(props.match.params.id).then(data => {\n      setAlbum(data)\n      setPhotos(data.photos)\n    })\n    getAlbums().then(data => setAlbums(data))\n  }, [props.match.params])\n\n  return (\n    <div>\n      <div className=\"aname\">\n        <h1>{album.name}</h1>\n      </div>\n      <div className=\"extracontain\">\n        <div className=\"albums\">\n          {albums.map(album => (\n            <p className=\"sidebar\">\n              {\" \"}\n              <Link to={`/album/${album.id}`}>{album.name}</Link>\n            </p>\n          ))}\n        </div>\n        <div className=\"grid\">\n          {photos.map(photo => (\n            <Link to={`/photo/${photo.id}`}>\n              <img src={photo.url} />\n              <p className=\"title\">{photo.name}</p>\n            </Link>\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React, { useEffect, useState } from \"react\"\nimport { getPhoto } from \"../actions/data\"\n\nexport default props => {\n  const [photo, setPhoto] = useState([])\n\n  useEffect(() => {\n    getPhoto(props.match.params.id).then(data => {\n      setPhoto(data)\n    })\n  }, [props.match.params])\n\n  return (\n    <div className=\"lastpic\">\n      <div className=\"photo\">\n        <h1>{photo.title}</h1>\n        <img src={photo.url} />\n      </div>\n    </div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./styles/base.css\"\nimport App from \"./components/App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React from \"react\"\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\nimport \"../styles/app.css\"\n\nimport Home from \"./Home\"\nimport Album from \"./Album\"\nimport Photo from \"./Photo\"\n\nexport default props => {\n  return (\n    <Router>\n      <div className=\"wrapper\">\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/album/:id\" component={Album} />\n        <Route path=\"/photo/:id\" component={Photo} />\n      </div>\n    </Router>\n  )\n}\n"],"sourceRoot":""}